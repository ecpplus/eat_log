# See http://unicorn.bogomips.org/Unicorn/Configurator.html for complete
# documentation.

working_directory "/srv/rails/eat_log/current" 
#listen 8080, :tcp_nopush => true
listen '/tmp/thin.eat_log.sock;'
timeout 10
rails_env = ENV['RAILS_ENV'] || 'production'
worker_processes (rails_env == 'production' ? 2 : 2)
pid "/srv/rails/eat_log/current/tmp/pids/unicorn.pid" 

stderr_path "/srv/rails/eat_log/current/log/unicorn.stderr.log"
stdout_path "/srv/rails/eat_log/current/log/unicorn.stdout.log"

preload_app true

before_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!

  old_pid = "#{server.config[:pid]}.oldbin"
  if old_pid != server.pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end

  sleep 1
end

after_fork do |server, worker|
  # per-process listener ports for debugging/admin/migrations
  # addr = "127.0.0.1:#{9293 + worker.nr}"
  # server.listen(addr, :tries => -1, :delay => 5, :tcp_nopush => true)

  # the following is *required* for Rails + "preload_app true",
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection

  # if preload_app is true, then you may also want to check and
  # restart any other shared sockets/descriptors such as Memcached,
  # and Redis.  TokyoCabinet file handles are safe to reuse
  # between any number of forked children (assuming your kernel
  # correctly implements pread()/pwrite() system calls)
end
